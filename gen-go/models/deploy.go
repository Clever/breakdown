// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deploy deploy information
//
// swagger:model Deploy
type Deploy struct {

	// Name of application
	// Required: true
	Application *string `json:"application"`

	// First 8 chars of commit SHA
	// Required: true
	CommitSha *string `json:"commit_sha"`

	// environment where app was deployed
	// Required: true
	Environment *string `json:"environment"`

	// run type of app eg. service, workflow
	// Required: true
	RunType *string `json:"run_type"`

	// Version number of app
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this deploy
func (m *Deploy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitSha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deploy) validateApplication(formats strfmt.Registry) error {

	if err := validate.Required("application", "body", m.Application); err != nil {
		return err
	}

	return nil
}

func (m *Deploy) validateCommitSha(formats strfmt.Registry) error {

	if err := validate.Required("commit_sha", "body", m.CommitSha); err != nil {
		return err
	}

	return nil
}

func (m *Deploy) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *Deploy) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *Deploy) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deploy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deploy) UnmarshalBinary(b []byte) error {
	var res Deploy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
