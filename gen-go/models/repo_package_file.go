// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepoPackageFile format of packages
//
// swagger:model RepoPackageFile
type RepoPackageFile struct {

	// error when parsing package-file, if any
	Error string `json:"error,omitempty"`

	// version of go, if any
	GoVersion string `json:"go_version,omitempty"`

	// Name of go module or npm package
	Name string `json:"name,omitempty"`

	// packages
	Packages map[string]RepoPackages `json:"packages,omitempty"`

	// path to package file eg "go.mod"
	// Required: true
	Path *string `json:"path"`

	// type of package-file, eg. gomod, npm
	// Required: true
	// Enum: [gomod npm]
	Type *string `json:"type"`
}

// Validate validates this repo package file
func (m *RepoPackageFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepoPackageFile) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for k := range m.Packages {

		if err := validate.Required("packages"+"."+k, "body", m.Packages[k]); err != nil {
			return err
		}
		if val, ok := m.Packages[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RepoPackageFile) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

var repoPackageFileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gomod","npm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repoPackageFileTypeTypePropEnum = append(repoPackageFileTypeTypePropEnum, v)
	}
}

const (

	// RepoPackageFileTypeGomod captures enum value "gomod"
	RepoPackageFileTypeGomod string = "gomod"

	// RepoPackageFileTypeNpm captures enum value "npm"
	RepoPackageFileTypeNpm string = "npm"
)

// prop value enum
func (m *RepoPackageFile) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, repoPackageFileTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RepoPackageFile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepoPackageFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepoPackageFile) UnmarshalBinary(b []byte) error {
	var res RepoPackageFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
