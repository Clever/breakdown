// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const createPackageFile = `-- name: CreatePackageFile :one
INSERT INTO package_file (
    repo_commit_id, path, type, meta
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type CreatePackageFileParams struct {
	RepoCommitID int64
	Path         string
	Type         PackageType
	Meta         pgtype.JSONB
}

func (q *Queries) CreatePackageFile(ctx context.Context, arg CreatePackageFileParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPackageFile,
		arg.RepoCommitID,
		arg.Path,
		arg.Type,
		arg.Meta,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRepo = `-- name: CreateRepo :one
WITH ins AS (
    INSERT INTO repo (
        name
    ) VALUES (
        $1
    )
    ON CONFLICT DO NOTHING
    RETURNING id
)
SELECT id
FROM repo r
WHERE r.name = $1
UNION
SELECT id FROM ins
`

func (q *Queries) CreateRepo(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, createRepo, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRepoCommit = `-- name: CreateRepoCommit :one
INSERT INTO repo_commit (
    repo_id, commit_sha, commit_date
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type CreateRepoCommitParams struct {
	RepoID     int64
	CommitSha  string
	CommitDate time.Time
}

func (q *Queries) CreateRepoCommit(ctx context.Context, arg CreateRepoCommitParams) (int64, error) {
	row := q.db.QueryRow(ctx, createRepoCommit, arg.RepoID, arg.CommitSha, arg.CommitDate)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDependencyId = `-- name: GetDependencyId :one
SELECT id
FROM dependency
WHERE type = ?
    AND name = ?
    AND version = ?
`

type GetDependencyIdParams struct {
	Type    PackageType
	Name    string
	Version string
}

func (q *Queries) GetDependencyId(ctx context.Context, arg GetDependencyIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getDependencyId, arg.Type, arg.Name, arg.Version)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDeploys = `-- name: GetDeploys :many
SELECT id, application, version, date, run_type, environment, commit_sha FROM deployment ORDER BY commit_sha
`

func (q *Queries) GetDeploys(ctx context.Context) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, getDeploys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.Application,
			&i.Version,
			&i.Date,
			&i.RunType,
			&i.Environment,
			&i.CommitSha,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepo = `-- name: GetRepo :one
SELECT id, name
FROM repo
WHERE name = $1
`

func (q *Queries) GetRepo(ctx context.Context, name string) (Repo, error) {
	row := q.db.QueryRow(ctx, getRepo, name)
	var i Repo
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const healthCheck = `-- name: HealthCheck :exec
SELECT 1
`

func (q *Queries) HealthCheck(ctx context.Context) error {
	_, err := q.db.Exec(ctx, healthCheck)
	return err
}

const listRepos = `-- name: ListRepos :many
SELECT id, name FROM repo
ORDER BY name
`

func (q *Queries) ListRepos(ctx context.Context) ([]Repo, error) {
	rows, err := q.db.Query(ctx, listRepos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
